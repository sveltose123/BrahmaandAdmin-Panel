{"version":3,"sources":["views/apps/calendar/AddEventSidebar.js","views/apps/brahmaand/leaderboard/LeaderBoardList.js","../node_modules/reactstrap/es/Label.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["eventColors","business","work","personal","others","React","Component","LeaderBoardList","state","rowData","paginationPageSize","currenPageSize","getPageSize","value","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","valueGetter","field","width","pinned","window","innerWidth","cellRendererFramework","params","className","data","desc","title","src","cat_img","onGridReady","gridApi","api","gridColumnApi","columnApi","setState","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","axiosConfig","get","then","response","console","log","id","error","this","sm","style","marginLeft","required","type","name","placeholder","date","onChange","changeHandler","tag","length","size","right","onClick","e","target","Ripple","color","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","_excluded","stringOrNumberProp","PropTypes","oneOfType","number","string","columnProps","bool","shape","order","offset","propTypes","children","node","hidden","check","for","tagPropType","cssModule","object","xs","md","lg","xl","widths","array","defaultProps","getColumnSizeClass","isXs","colWidth","colSize","Label","props","Tag","htmlFor","attributes","_objectWithoutPropertiesLoose","colClasses","forEach","i","columnProp","colClass","isObject","_classNames","colSizeInterfix","push","mapToCssModules","classNames","classes","createElement","_extends","row","inline","disabled","FormGroup"],"mappings":"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","file":"static/js/69.529006ab.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { X, Tag } from \"react-feather\"\r\nimport {\r\n  UncontrolledDropdown,\r\n  DropdownItem,\r\n  DropdownMenu,\r\n  DropdownToggle,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Button\r\n} from \"reactstrap\"\r\nimport Flatpickr from \"react-flatpickr\";\r\n\r\nimport \"flatpickr/dist/themes/light.css\";\r\nimport \"../../../assets/scss/plugins/forms/flatpickr/flatpickr.scss\"\r\n\r\nconst eventColors = {\r\n  business: \"chip-success\",\r\n  work: \"chip-warning\",\r\n  personal: \"chip-danger\",\r\n  others: \"chip-primary\"\r\n}\r\nclass AddEvent extends React.Component {\r\n  state = {\r\n    startDate: new Date(),\r\n    endDate: new Date(),\r\n    title: \"\",\r\n    label: null,\r\n    allDay: true,\r\n    selectable: true\r\n  }\r\n  handleDateChange = date => {\r\n    this.setState({\r\n      startDate: date\r\n    })\r\n  }\r\n\r\n  handleEndDateChange = date => {\r\n    this.setState({\r\n      endDate: date\r\n    })\r\n  }\r\n\r\n  handleLabelChange = label => {\r\n    this.setState({\r\n      label\r\n    })\r\n  }\r\n\r\n  handleAddEvent = id => {\r\n    this.props.handleSidebar(false)\r\n    this.props.addEvent({\r\n      id: id,\r\n      title: this.state.title,\r\n      start: this.state.startDate,\r\n      end: this.state.endDate,\r\n      label: this.state.label === null ? \"others\" : this.state.label,\r\n      allDay: this.state.allDay,\r\n      selectable: this.state.selectable\r\n    })\r\n    this.setState({\r\n      startDate: new Date(),\r\n      endDate: new Date(),\r\n      title: \"\",\r\n      label: null,\r\n      allDay: true,\r\n      selectable: true\r\n    })\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    this.setState({\r\n      title: nextProps.eventInfo === null ? \"\" : nextProps.eventInfo.title,\r\n      url: nextProps.eventInfo === null ? \"\" : nextProps.eventInfo.url,\r\n      startDate:\r\n        nextProps.eventInfo === null\r\n          ? new Date()\r\n          : new Date(nextProps.eventInfo.start),\r\n      endDate:\r\n        nextProps.eventInfo === null\r\n          ? new Date()\r\n          : new Date(nextProps.eventInfo.end),\r\n      label: nextProps.eventInfo === null ? null : nextProps.eventInfo.label,\r\n      allDay: nextProps.eventInfo === null ? true : nextProps.eventInfo.allDay,\r\n      selectable:\r\n        nextProps.eventInfo === null ? true : nextProps.eventInfo.selectable\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let events = this.props.events.map(i => i.id)\r\n    let lastId = events.pop()\r\n    let newEventId = lastId + 1\r\n    return (\r\n      <div\r\n        className={`add-event-sidebar ${\r\n          this.props.sidebar ? \"show\" : \"hidden\"\r\n        }`}\r\n      >\r\n        <div className=\"header d-flex justify-content-between\">\r\n          <h3 className=\"text-bold-600 mb-0\">\r\n            {this.props.eventInfo !== null &&\r\n            this.props.eventInfo.title.length > 0\r\n              ? \"Update Event\"\r\n              : \"Add Event\"}\r\n          </h3>\r\n          <div\r\n            className=\"close-icon cursor-pointer\"\r\n            onClick={() => this.props.handleSidebar(false)}\r\n          >\r\n            <X size={20} />\r\n          </div>\r\n        </div>\r\n        <div className=\"add-event-body\">\r\n          <div className=\"category-action d-flex justify-content-between my-50\">\r\n            <div className=\"event-category\">\r\n              {this.state.label !== null ? (\r\n                <div className={`chip ${eventColors[this.state.label]}`}>\r\n                  <div className=\"chip-body\">\r\n                    <div className=\"chip-text text-capitalize\">\r\n                      {this.state.label}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n            <div className=\"category-dropdown\">\r\n              <UncontrolledDropdown>\r\n                <DropdownToggle tag=\"div\" className=\"cursor-pointer\">\r\n                  <Tag size={18} />\r\n                </DropdownToggle>\r\n                <DropdownMenu tag=\"ul\" right>\r\n                  <DropdownItem\r\n                    tag=\"li\"\r\n                    onClick={() => this.handleLabelChange(\"business\")}\r\n                  >\r\n                    <span className=\"bullet bullet-success bullet-sm mr-50\"></span>\r\n                    <span>Business</span>\r\n                  </DropdownItem>\r\n                  <DropdownItem\r\n                    tag=\"li\"\r\n                    onClick={() => this.handleLabelChange(\"work\")}\r\n                  >\r\n                    <span className=\"bullet bullet-warning bullet-sm mr-50\"></span>\r\n                    <span>Work</span>\r\n                  </DropdownItem>\r\n                  <DropdownItem\r\n                    tag=\"li\"\r\n                    onClick={() => this.handleLabelChange(\"personal\")}\r\n                  >\r\n                    <span className=\"bullet bullet-danger bullet-sm mr-50\"></span>\r\n                    <span>Personal</span>\r\n                  </DropdownItem>\r\n                  <DropdownItem\r\n                    tag=\"li\"\r\n                    onClick={() => this.handleLabelChange(\"others\")}\r\n                  >\r\n                    <span className=\"bullet bullet-primary bullet-sm mr-50\"></span>\r\n                    <span>Others</span>\r\n                  </DropdownItem>\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown>\r\n            </div>\r\n          </div>\r\n          <div className=\"add-event-fields mt-2\">\r\n            <FormGroup className=\"form-label-group\">\r\n              <Input\r\n                type=\"text\"\r\n                id=\"EventTitle\"\r\n                placeholder=\"Event Title\"\r\n                value={this.state.title}\r\n                onChange={e => this.setState({ title: e.target.value })}\r\n              />\r\n              <Label for=\"EventTitle\">Event Title</Label>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"startDate\">Start Date</Label>\r\n              <Flatpickr\r\n                id=\"startDate\"\r\n                className=\"form-control\"\r\n                value={this.state.startDate}\r\n                onChange={date => this.handleDateChange(date)}\r\n                options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"Y-m-d\", }}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"endDate\">End Date</Label>\r\n              <Flatpickr\r\n                id=\"endDate\"\r\n                className=\"form-control\"\r\n                value={this.state.endDate}\r\n                onChange={date => this.handleEndDateChange(date)}\r\n                options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"Y-m-d\", }}\r\n              />\r\n            </FormGroup>\r\n          </div>\r\n          <hr className=\"my-2\" />\r\n          <div className=\"add-event-actions text-right\">\r\n            <Button.Ripple\r\n              disabled={this.state.title.length > 0 ? false : true}\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                this.props.handleSidebar(false)\r\n                if (\r\n                  this.props.eventInfo === null ||\r\n                  this.props.eventInfo.title.length <= 0\r\n                )\r\n                  this.handleAddEvent(newEventId)\r\n                else\r\n                  this.props.updateEvent({\r\n                    id: this.props.eventInfo.id,\r\n                    title: this.state.title,\r\n                    label: this.state.label,\r\n                    start: this.state.startDate,\r\n                    end: this.state.endDate,\r\n                    allDay: true,\r\n                    selectable: true\r\n                  })\r\n              }}\r\n            >\r\n              {this.props.eventInfo !== null &&\r\n              this.props.eventInfo.title.length > 0\r\n                ? \"Update Event\"\r\n                : \"Add Event\"}\r\n            </Button.Ripple>\r\n            <Button.Ripple\r\n              className=\"ml-1\"\r\n              color=\"flat-danger\"\r\n              onClick={() => {\r\n                this.props.handleSidebar(false)\r\n                if (this.props.handleSelectedEvent)\r\n                  this.props.handleSelectedEvent(null)\r\n                else return null\r\n              }}\r\n            >\r\n              Cancel\r\n            </Button.Ripple>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddEvent\r\n","import React from \"react\";\r\nimport { Card, CardBody, Input, Row, Col, Button, UncontrolledDropdown, DropdownMenu, DropdownItem, DropdownToggle, } from \"reactstrap\";\r\nimport axiosConfig from \"../../../../axiosConfig\";\r\nimport { ContextLayout } from \"../../../../utility/context/Layout\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { Eye, Edit, Trash2, ChevronDown } from \"react-feather\";\r\n//import classnames from \"classnames\";\r\nimport { history } from \"../../../../history\";\r\nimport \"../../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport { Route } from \"react-router-dom\";\r\n// import Calendar from \"../../calendar/Calendar\";\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport AddEventSidebar from \"../../calendar/AddEventSidebar\";\r\n\r\n\r\nclass LeaderBoardList extends React.Component {\r\n    state = {\r\n        rowData: [],\r\n        paginationPageSize: 20,\r\n        currenPageSize: \"\",\r\n        getPageSize: \"\",\r\n        value: \"\",\r\n        defaultColDef: {\r\n            sortable: true,\r\n            editable: true,\r\n            resizable: true,\r\n            suppressMenu: true,\r\n        },\r\n\r\n\r\n        columnDefs: [\r\n            {\r\n                headerName: \"S.No\",\r\n                valueGetter: \"node.rowIndex + 1\",\r\n                field: \"node.rowIndex + 1\",\r\n                width: 150,\r\n                pinned: window.innerWidth > 992 ? \"left\" : false,\r\n                // filter: true,\r\n                // checkboxSelection: true,\r\n                // headerCheckboxSelectionFilteredOnly: true,\r\n                // headerCheckboxSelection: true,\r\n            },\r\n            {\r\n                headerName: \"Name\",\r\n                field: \"desc\",\r\n                // filter: true,\r\n                width: 150,\r\n                // pinned: window.innerWidth > 992 ? \"left\" : false,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"d-flex align-items-center cursor-pointer\">\r\n                            <span>{params.data.desc}</span>\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n\r\n\r\n            {\r\n                headerName: \"Current Month Point\",\r\n                field: \"title\",\r\n                // filter: true,\r\n                width: 150,\r\n                // pinned: window.innerWidth > 992 ? \"left\" : false,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"d-flex align-items-center cursor-pointer\">\r\n                            <span>{params.data.title}</span>\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n            {\r\n                headerName: \"All Time Point\",\r\n                field: \"desc\",\r\n                // filter: true,\r\n                width: 150,\r\n                // pinned: window.innerWidth > 992 ? \"left\" : false,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"d-flex align-items-center cursor-pointer\">\r\n                            <span>{params.data.desc}</span>\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n            {\r\n                headerName: \"Image\",\r\n                field: \"file\",\r\n                // filter: true,\r\n                width: 150,\r\n                // pinned: window.innerWidth > 992 ? \"left\" : false,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <img className=\" d-flex align-items-center cursor-pointer w-50 h-50 rounded\" src={params.data.cat_img} />\r\n\r\n                    );\r\n                },\r\n            },\r\n            {\r\n                headerName: \"Planet Position\",\r\n                field: \"desc\",\r\n                // filter: true,\r\n                width: 150,\r\n                // pinned: window.innerWidth > 992 ? \"left\" : false,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"d-flex align-items-center cursor-pointer\">\r\n                            <span>{params.data.desc}</span>\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n            {\r\n                headerName: \"Amount\",\r\n                field: \"desc\",\r\n                // filter: true,\r\n                width: 150,\r\n                // pinned: window.innerWidth > 992 ? \"left\" : false,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"d-flex align-items-center cursor-pointer\">\r\n                            <span>{params.data.desc}</span>\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n\r\n            // {\r\n            //     headerName: \"Actions\",\r\n            //     field: \"sortorder\",\r\n            //     width: 150,\r\n            //     // pinned: window.innerWidth > 992 ? \"right\" : false,\r\n            //     cellRendererFramework: (params) => {\r\n            //         return (\r\n            //             <div className=\"actions cursor-pointer\">\r\n            //                 <Route\r\n            //                     render={({ history }) => (\r\n            //                         <Edit\r\n            //                             className=\"mr-50\"\r\n            //                             size=\"25px\"\r\n            //                             color=\"blue\"\r\n            //                             onClick={() =>\r\n            //                                 history.push(\r\n            //                                     `/app/brahmaand/leaderboard/editLeader/${params.data._id}`\r\n            //                                 )\r\n            //                             }\r\n            //                         />\r\n            //                     )}\r\n            //                 />\r\n\r\n            //     <Trash2\r\n            //         className=\"mr-50\"\r\n            //         size=\"25px\"\r\n            //         color=\"red\"\r\n            //         onClick={() => {\r\n            //             let selectedData = this.gridApi.getSelectedRows();\r\n            //             this.runthisfunction(params.data._id);\r\n            //             this.gridApi.updateRowData({ remove: selectedData });\r\n            //         }}\r\n            //     />\r\n            // </div>\r\n            // );\r\n            // },\r\n            //     },\r\n        ],\r\n    };\r\n\r\n    async componentDidMount() {\r\n        await axiosConfig\r\n            .get(\"/get_startup\", {\r\n                // headers: {\r\n                //   \"auth-adtoken\": localStorage.getItem(\"auth-adtoken\"),\r\n                // },\r\n            })\r\n            .then((response) => {\r\n                const rowData = response.data.data;\r\n                console.log(rowData);\r\n                this.setState({ rowData });\r\n            });\r\n    }\r\n    async runthisfunction(id) {\r\n        console.log(id);\r\n        await axiosConfig.get(`/dlt_startup/${id}`).then(\r\n            (response) => {\r\n                console.log(response);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n    onGridReady = (params) => {\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.setState({\r\n            currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n            getPageSize: this.gridApi.paginationGetPageSize(),\r\n            totalPages: this.gridApi.paginationGetTotalPages(),\r\n        });\r\n    };\r\n\r\n    updateSearchQuery = (val) => {\r\n        this.gridApi.setQuickFilter(val);\r\n    };\r\n\r\n    filterSize = (val) => {\r\n        if (this.gridApi) {\r\n            this.gridApi.paginationSetPageSize(Number(val));\r\n            this.setState({\r\n                currenPageSize: val,\r\n                getPageSize: val,\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        const { rowData, columnDefs, defaultColDef } = this.state;\r\n        return (\r\n            console.log(rowData),\r\n            (\r\n                <Row sm=\"12\">\r\n                    <Col>\r\n                        <Card>\r\n                            <Row className=\"m-1\">\r\n                                <Col sm=\"6\" className=\"tb\">\r\n                                    <h1 className=\"float-left\">\r\n                                        Leader Board List\r\n                                    </h1>\r\n                                </Col>\r\n                                <Col style={{ marginLeft: \"120px\" }}>\r\n\r\n                                    <h5>Start Date</h5>\r\n                                    <Input className=\"btn btn-success\"\r\n                                        required\r\n                                        type=\"date\"\r\n                                        name=\"date\"\r\n                                        placeholder=\"Enter name\"\r\n                                        value={this.state.date}\r\n                                        onChange={this.changeHandler}\r\n                                    ></Input>\r\n                                </Col>\r\n                                <Col> <h5>End Date</h5>\r\n                                    <Input className=\"btn btn-success\"\r\n                                        required\r\n                                        type=\"date\"\r\n                                        name=\"date\"\r\n                                        placeholder=\"Enter name\"\r\n                                        value={this.state.date}\r\n                                        onChange={this.changeHandler}\r\n                                    ></Input>\r\n\r\n                                </Col>\r\n                                <Col className=\"m-1\">\r\n                                    {/* <Route\r\n                                        render={({ history }) => (\r\n                                            <Button\r\n                                                className=\"btn btn-success float-right\"\r\n                                                onClick={() =>\r\n                                                    history.push(\"/app/brahmaand/leaderboard/addLeader\")\r\n                                                }\r\n                                            >\r\n                                                Choose Winner\r\n                                            </Button>\r\n                                        )}\r\n                                    /> */}\r\n                                </Col>\r\n                            </Row>\r\n                            <CardBody>\r\n                                {this.state.rowData === null ? null : (\r\n                                    <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                                        <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                                            <div className=\"mb-1\">\r\n                                                <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                                                    <DropdownToggle tag=\"div\">\r\n                                                        {this.gridApi\r\n                                                            ? this.state.currenPageSize\r\n                                                            : \"\" * this.state.getPageSize -\r\n                                                            (this.state.getPageSize - 1)}{\" \"}\r\n                                                        -{\" \"}\r\n                                                        {this.state.rowData.length -\r\n                                                            this.state.currenPageSize *\r\n                                                            this.state.getPageSize >\r\n                                                            0\r\n                                                            ? this.state.currenPageSize *\r\n                                                            this.state.getPageSize\r\n                                                            : this.state.rowData.length}{\" \"}\r\n                                                        of {this.state.rowData.length}\r\n                                                        <ChevronDown className=\"ml-50\" size={15} />\r\n                                                    </DropdownToggle>\r\n                                                    <DropdownMenu right>\r\n                                                        <DropdownItem\r\n                                                            tag=\"div\"\r\n                                                            onClick={() => this.filterSize(20)}\r\n                                                        >\r\n                                                            20\r\n                                                        </DropdownItem>\r\n                                                        <DropdownItem\r\n                                                            tag=\"div\"\r\n                                                            onClick={() => this.filterSize(50)}\r\n                                                        >\r\n                                                            50\r\n                                                        </DropdownItem>\r\n                                                        <DropdownItem\r\n                                                            tag=\"div\"\r\n                                                            onClick={() => this.filterSize(100)}\r\n                                                        >\r\n                                                            100\r\n                                                        </DropdownItem>\r\n                                                        <DropdownItem\r\n                                                            tag=\"div\"\r\n                                                            onClick={() => this.filterSize(134)}\r\n                                                        >\r\n                                                            134\r\n                                                        </DropdownItem>\r\n                                                    </DropdownMenu>\r\n                                                </UncontrolledDropdown>\r\n                                            </div>\r\n                                            <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n                                                <div className=\"table-input mr-1\">\r\n                                                    <Input\r\n                                                        placeholder=\"search...\"\r\n                                                        onChange={(e) =>\r\n                                                            this.updateSearchQuery(e.target.value)\r\n                                                        }\r\n                                                        value={this.state.value}\r\n                                                    />\r\n                                                </div>\r\n                                                <div className=\"export-btn\">\r\n                                                    <Button.Ripple\r\n                                                        color=\"primary\"\r\n                                                        onClick={() => this.gridApi.exportDataAsCsv()}\r\n                                                    >\r\n                                                        Export as CSV\r\n                                                    </Button.Ripple>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <ContextLayout.Consumer>\r\n                                            {(context) => (\r\n                                                <AgGridReact\r\n                                                    gridOptions={{}}\r\n                                                    rowSelection=\"multiple\"\r\n                                                    defaultColDef={defaultColDef}\r\n                                                    columnDefs={columnDefs}\r\n                                                    rowData={rowData}\r\n                                                    onGridReady={this.onGridReady}\r\n                                                    colResizeDefault={\"shift\"}\r\n                                                    animateRows={true}\r\n                                                    floatingFilter={false}\r\n                                                    pagination={true}\r\n                                                    paginationPageSize={this.state.paginationPageSize}\r\n                                                    pivotPanelShow=\"always\"\r\n                                                    enableRtl={context.state.direction === \"rtl\"}\r\n                                                />\r\n                                            )}\r\n                                        </ContextLayout.Consumer>\r\n                                    </div>\r\n                                )}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            )\r\n        );\r\n    }\r\n}\r\nexport default LeaderBoardList;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"hidden\", \"widths\", \"tag\", \"check\", \"size\", \"for\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType, isObject } from './utils';\nvar colWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar columnProps = PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number, PropTypes.shape({\n  size: stringOrNumberProp,\n  order: stringOrNumberProp,\n  offset: stringOrNumberProp\n})]);\nvar propTypes = {\n  children: PropTypes.node,\n  hidden: PropTypes.bool,\n  check: PropTypes.bool,\n  size: PropTypes.string,\n  for: PropTypes.string,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  xs: columnProps,\n  sm: columnProps,\n  md: columnProps,\n  lg: columnProps,\n  xl: columnProps,\n  widths: PropTypes.array\n};\nvar defaultProps = {\n  tag: 'label',\n  widths: colWidths\n};\n\nvar getColumnSizeClass = function getColumnSizeClass(isXs, colWidth, colSize) {\n  if (colSize === true || colSize === '') {\n    return isXs ? 'col' : \"col-\" + colWidth;\n  } else if (colSize === 'auto') {\n    return isXs ? 'col-auto' : \"col-\" + colWidth + \"-auto\";\n  }\n\n  return isXs ? \"col-\" + colSize : \"col-\" + colWidth + \"-\" + colSize;\n};\n\nvar Label = function Label(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      hidden = props.hidden,\n      widths = props.widths,\n      Tag = props.tag,\n      check = props.check,\n      size = props.size,\n      htmlFor = props.for,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var columnProp = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!columnProp && columnProp !== '') {\n      return;\n    }\n\n    var isXs = !i;\n    var colClass;\n\n    if (isObject(columnProp)) {\n      var _classNames;\n\n      var colSizeInterfix = isXs ? '-' : \"-\" + colWidth + \"-\";\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);\n      colClasses.push(mapToCssModules(classNames((_classNames = {}, _classNames[colClass] = columnProp.size || columnProp.size === '', _classNames[\"order\" + colSizeInterfix + columnProp.order] = columnProp.order || columnProp.order === 0, _classNames[\"offset\" + colSizeInterfix + columnProp.offset] = columnProp.offset || columnProp.offset === 0, _classNames))), cssModule);\n    } else {\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp);\n      colClasses.push(colClass);\n    }\n  });\n  var classes = mapToCssModules(classNames(className, hidden ? 'sr-only' : false, check ? 'form-check-label' : false, size ? \"col-form-label-\" + size : false, colClasses, colClasses.length ? 'col-form-label' : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({\n    htmlFor: htmlFor\n  }, attributes, {\n    className: classes\n  }));\n};\n\nLabel.propTypes = propTypes;\nLabel.defaultProps = defaultProps;\nexport default Label;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}