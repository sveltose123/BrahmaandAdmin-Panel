{"version":3,"sources":["views/apps/brahmaand/category/CategoryList.js"],"names":["CategoryList","state","rowData","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","valueGetter","field","width","filter","cellRendererFramework","params","className","data","title","desc","image","render","history","size","color","onClick","push","_id","selectedData","gridApi","getSelectedRows","runthisfunction","updateRowData","remove","onGridReady","api","gridColumnApi","columnApi","setState","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","axiosConfig","get","then","response","console","log","id","FT1","status","payload","call_type","active_value","T1","T2","T3","trl","trl_type","FT1_type","FT2_type","FT3_type","FT5_type","qty","sl_type","trade_type","cstmMsg","post","swal","window","location","reload","catch","error","this","sm","tag","length","right","placeholder","onChange","e","target","value","Ripple","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/190.5d22077a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardBody, Input, Row, Col, Button, UncontrolledDropdown, DropdownMenu, DropdownItem, DropdownToggle, } from \"reactstrap\";\r\nimport axiosConfig from \"../../../../axiosConfig\";\r\nimport moment from \"moment\";\r\n\r\nimport { ContextLayout } from \"../../../../utility/context/Layout\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { Edit, Trash2, ChevronDown, Smartphone } from \"react-feather\";\r\nimport \"../../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport { Route } from \"react-router-dom\";\r\nimport swal from \"sweetalert\";\r\n\r\nclass CategoryList extends React.Component {\r\n    state = {\r\n        rowData: [],\r\n        paginationPageSize: 20,\r\n        currenPageSize: \"\",\r\n        getPageSize: \"\",\r\n        defaultColDef: {\r\n            sortable: true,\r\n            editable: true,\r\n            resizable: true,\r\n            suppressMenu: true,\r\n        },\r\n\r\n        columnDefs: [\r\n            {\r\n                headerName: \"S.No\",\r\n                valueGetter: \"node.rowIndex + 1\",\r\n                field: \"node.rowIndex + 1\",\r\n                width: 100,\r\n                filter: true,\r\n                // checkboxSelection: true,\r\n                // headerCheckboxSelectionFilteredOnly: true,\r\n                // headerCheckboxSelection: true,\r\n            },\r\n\r\n            {\r\n                headerName: \"Title\",\r\n                field: \"title\",\r\n                width: 250,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"d-flex align-items-center cursor-pointer\">\r\n                            <span>{params.data.title}</span>\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n\r\n            {\r\n                headerName: \"Note\",\r\n                field: \"desc\",\r\n                width: 250,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"d-flex  align-items-center cursor-pointer\">\r\n                            <span>{params.data.desc}</span>\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n            {\r\n                headerName: \"Upload Image\",\r\n                field: \"image\",\r\n                // filter: true,\r\n                width: 300,\r\n                // pinned: window.innerWidth > 992 ? \"left\" : false,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"d-flex align-items-center cursor-pointer\">\r\n                            <span>{params.data.image}</span>\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n\r\n\r\n\r\n\r\n\r\n            {\r\n                headerName: \"Actions\",\r\n                field: \"sortorder\",\r\n                width: 150,\r\n                // pinned: window.innerWidth > 992 ? \"right\" : false,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"actions cursor-pointer\">\r\n                            {/* <Smartphone\r\n                                className=\"mr-50\"\r\n                                size=\"25px\"\r\n                                color={params.data.status === \"Active\" ? \"green\" : \"red\"}\r\n                                onClick={() => {\r\n                                    let selectedData = this.gridApi.getSelectedRows();\r\n                                    this.runthisfunctionEdit(params.data._id, selectedData);\r\n                                }}\r\n                            /> */}\r\n\r\n                            <Route\r\n                                render={({ history }) => (\r\n                                    <Edit\r\n                                        className=\"mr-50\"\r\n                                        size=\"25px\"\r\n                                        color=\"blue\"\r\n                                        onClick={() =>\r\n                                            history.push(`/app/brahmaand/category/editCategory/${params.data._id}`)\r\n                                        }\r\n                                    />\r\n                                )}\r\n                            />\r\n\r\n                            <Trash2\r\n                                size={20}\r\n                                color=\"red\"\r\n                                onClick={() => {\r\n                                    let selectedData = this.gridApi.getSelectedRows();\r\n                                    this.runthisfunction(params.data._id);\r\n                                    this.gridApi.updateRowData({ remove: selectedData });\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n        ],\r\n    };\r\n\r\n    async componentDidMount() {\r\n        await axiosConfig.get(`/getallCategory`).then((response) => {\r\n            const rowData = response.data.data;\r\n            console.log(rowData);\r\n            this.setState({ rowData });\r\n        });\r\n    }\r\n    // async runthisfunction(id) {\r\n    //     console.log(id);\r\n    //     await axiosConfig.get(`/dlt_alltrade/${id}`).then(\r\n    //         (response) => {\r\n    //             console.log(response);\r\n    //         },\r\n    //         (error) => {\r\n    //             console.log(error);\r\n    //         }\r\n    //     );\r\n    // }\r\n\r\n    async runthisfunctionEdit(id, selectedData) {\r\n        console.log(\"@@selectedData\", id, selectedData[0].FT1);\r\n        //\r\n        let status = selectedData[0].status === \"Active\" ? \"Deactive\" : \"Active\";\r\n        let payload = {\r\n            // expiryDate:selectedData[0].expiryDate,\r\n            // script_type:selectedData[0].script_type,\r\n            // fnoindex_scrpt_name:selectedData[0].fnoindex_scrpt_name,\r\n            call_type: selectedData[0].call_type,\r\n            active_value: selectedData[0].active_value,\r\n            T1: selectedData[0].T1,\r\n            T2: selectedData[0].T2,\r\n            T3: selectedData[0].T3,\r\n            trl: selectedData[0].trl,\r\n            trl_type: selectedData[0].trl_type,\r\n            FT1_type: selectedData[0].FT1_type,\r\n            FT2_type: selectedData[0].FT2_type,\r\n            FT3_type: selectedData[0].FT3_type,\r\n            FT5_type: selectedData[0].FT5_type,\r\n            qty: selectedData[0].qty,\r\n            sl_type: selectedData[0].sl_type,\r\n            // no_of_lots:selectedData[0].no_of_lots,\r\n            trade_type: selectedData[0].trade_type,\r\n            cstmMsg: selectedData[0].cstmMsg,\r\n            status: status,\r\n        };\r\n        await axiosConfig\r\n            .post(`/editalltrade/${id}`, payload)\r\n            .then((response) => {\r\n                console.log(\"sdjgsjdgjhgsdjh\", response);\r\n                swal(\"Success!\", \"Status \" + status + \" SuccessFull!\", \"success\");\r\n                // this.props.history.push(\"/app/trade/categorylist\");\r\n                window.location.reload();\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    onGridReady = (params) => {\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.setState({\r\n            currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n            getPageSize: this.gridApi.paginationGetPageSize(),\r\n            totalPages: this.gridApi.paginationGetTotalPages(),\r\n        });\r\n    };\r\n\r\n    updateSearchQuery = (val) => {\r\n        this.gridApi.setQuickFilter(val);\r\n    };\r\n\r\n    filterSize = (val) => {\r\n        if (this.gridApi) {\r\n            this.gridApi.paginationSetPageSize(Number(val));\r\n            this.setState({\r\n                currenPageSize: val,\r\n                getPageSize: val,\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { rowData, columnDefs, defaultColDef } = this.state;\r\n        return (\r\n            console.log(rowData),\r\n            (\r\n                <Row className=\"app-user-list\">\r\n                    <Col sm=\"12\"></Col>\r\n                    <Col sm=\"12\">\r\n                        <Card>\r\n                            <Row className=\"m-2\">\r\n                                <Col>\r\n                                    <h1 sm=\"6\" className=\"float-left\">\r\n                                        Category List\r\n                                    </h1>\r\n                                </Col>\r\n                                <Col className=\"pt-4\">\r\n                                    <Route\r\n                                        render={({ history }) => (\r\n                                            <Button\r\n                                                className=\" btn btn-success float-right\"\r\n                                                onClick={() => history.push(\"/app/brahmaand/category/addCategory\")}\r\n                                            >\r\n                                                Add Category\r\n                                            </Button>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <CardBody>\r\n                                {this.state.rowData === null ? null : (\r\n                                    <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                                        <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                                            <div className=\"mb-1\">\r\n                                                <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                                                    <DropdownToggle tag=\"div\">\r\n                                                        {this.gridApi\r\n                                                            ? this.state.currenPageSize\r\n                                                            : \"\" * this.state.getPageSize -\r\n                                                            (this.state.getPageSize - 1)}{\" \"}\r\n                                                        -{\" \"}\r\n                                                        {this.state.rowData.length -\r\n                                                            this.state.currenPageSize *\r\n                                                            this.state.getPageSize >\r\n                                                            0\r\n                                                            ? this.state.currenPageSize *\r\n                                                            this.state.getPageSize\r\n                                                            : this.state.rowData.length}{\" \"}\r\n                                                        of {this.state.rowData.length}\r\n                                                        <ChevronDown className=\"ml-50\" size={15} />\r\n                                                    </DropdownToggle>\r\n                                                    <DropdownMenu right>\r\n                                                        <DropdownItem\r\n                                                            tag=\"div\"\r\n                                                            onClick={() => this.filterSize(20)}\r\n                                                        >\r\n                                                            20\r\n                                                        </DropdownItem>\r\n                                                        <DropdownItem\r\n                                                            tag=\"div\"\r\n                                                            onClick={() => this.filterSize(50)}\r\n                                                        >\r\n                                                            50\r\n                                                        </DropdownItem>\r\n                                                        <DropdownItem\r\n                                                            tag=\"div\"\r\n                                                            onClick={() => this.filterSize(100)}\r\n                                                        >\r\n                                                            100\r\n                                                        </DropdownItem>\r\n                                                        <DropdownItem\r\n                                                            tag=\"div\"\r\n                                                            onClick={() => this.filterSize(134)}\r\n                                                        >\r\n                                                            134\r\n                                                        </DropdownItem>\r\n                                                    </DropdownMenu>\r\n                                                </UncontrolledDropdown>\r\n                                            </div>\r\n                                            <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n                                                <div className=\"table-input mr-1\">\r\n                                                    <Input\r\n                                                        placeholder=\"search...\"\r\n                                                        onChange={(e) =>\r\n                                                            this.updateSearchQuery(e.target.value)\r\n                                                        }\r\n                                                        value={this.state.value}\r\n                                                    />\r\n                                                </div>\r\n                                                <div className=\"export-btn\">\r\n                                                    <Button.Ripple\r\n                                                        color=\"primary\"\r\n                                                        onClick={() => this.gridApi.exportDataAsCsv()}\r\n                                                    >\r\n                                                        Export as CSV\r\n                                                    </Button.Ripple>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <ContextLayout.Consumer>\r\n                                            {(context) => (\r\n                                                <AgGridReact\r\n                                                    gridOptions={{}}\r\n                                                    rowSelection=\"multiple\"\r\n                                                    defaultColDef={defaultColDef}\r\n                                                    columnDefs={columnDefs}\r\n                                                    rowData={rowData}\r\n                                                    onGridReady={this.onGridReady}\r\n                                                    colResizeDefault={\"shift\"}\r\n                                                    animateRows={true}\r\n                                                    floatingFilter={false}\r\n                                                    pagination={true}\r\n                                                    paginationPageSize={this.state.paginationPageSize}\r\n                                                    pivotPanelShow=\"always\"\r\n                                                    enableRtl={context.state.direction === \"rtl\"}\r\n                                                />\r\n                                            )}\r\n                                        </ContextLayout.Consumer>\r\n                                    </div>\r\n                                )}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            )\r\n        );\r\n    }\r\n}\r\nexport default CategoryList;\r\n"],"sourceRoot":""}