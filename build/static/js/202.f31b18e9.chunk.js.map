{"version":3,"sources":["views/apps/brahmaand/subcategory/SubcategoryList.js"],"names":["SubcategoryList","state","rowData","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","valueGetter","field","width","filter","cellRendererFramework","params","className","data","category","title","desc","pinned","window","innerWidth","render","history","size","color","onClick","push","_id","selectedData","gridApi","getSelectedRows","runthisfunction","updateRowData","remove","onGridReady","api","gridColumnApi","columnApi","setState","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","axiosConfig","get","then","response","console","log","this","sm","tag","length","right","placeholder","onChange","e","target","value","Ripple","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":";isNAaMA,E,4MACFC,MAAQ,CACJC,QAAS,GACTC,mBAAoB,GACpBC,eAAgB,GAChBC,YAAa,GACbC,cAAe,CACXC,UAAU,EACVC,UAAU,EACVC,WAAW,EACXC,cAAc,GAGlBC,WAAY,CACR,CACIC,WAAY,OACZC,YAAa,oBACbC,MAAO,oBACPC,MAAO,IACPC,QAAQ,GAKZ,CACIJ,WAAY,sBACZE,MAAO,QACPC,MAAO,IACPE,sBAAuB,SAACC,GAAY,IAAD,EAC/B,OACI,yBAAKC,UAAU,4CACX,wCAAOD,EAAOE,KAAKC,gBAAnB,aAAO,EAAsBC,UAK7C,CACIV,WAAY,QACZE,MAAO,QACPC,MAAO,IACPE,sBAAuB,SAACC,GACpB,OACI,yBAAKC,UAAU,4CACX,8BAAOD,EAAOE,KAAKE,UAMnC,CACIV,WAAY,OACZE,MAAO,OACPC,MAAO,IACPE,sBAAuB,SAACC,GACpB,OACI,yBAAKC,UAAU,6CACX,8BAAOD,EAAOE,KAAKG,SAKnC,CACIX,WAAY,UACZE,MAAO,YACPC,MAAO,IACPS,OAAQC,OAAOC,WAAa,KAAM,QAClCT,sBAAuB,SAACC,GACpB,OACI,yBAAKC,UAAU,0BAWX,kBAAC,IAAD,CACIQ,OAAQ,gBAAGC,EAAH,EAAGA,QAAH,OACJ,kBAAC,IAAD,CACIT,UAAU,QACVU,KAAK,OACLC,MAAM,OACNC,QAAS,kBACLH,EAAQI,KAAR,qDAA2Dd,EAAOE,KAAKa,YAMvF,kBAAC,IAAD,CACIJ,KAAM,GACNC,MAAM,MACNC,QAAS,WACL,IAAIG,EAAe,EAAKC,QAAQC,kBAChC,EAAKC,gBAAgBnB,EAAOE,KAAKa,KACjC,EAAKE,QAAQG,cAAc,CAAEC,OAAQL,Y,EA+BrEM,YAAc,SAACtB,GACX,EAAKiB,QAAUjB,EAAOuB,IACtB,EAAKC,cAAgBxB,EAAOyB,UAC5B,EAAKC,SAAS,CACVxC,eAAgB,EAAK+B,QAAQU,2BAA6B,EAC1DxC,YAAa,EAAK8B,QAAQW,wBAC1BC,WAAY,EAAKZ,QAAQa,6B,EAIjCC,kBAAoB,SAACC,GACjB,EAAKf,QAAQgB,eAAeD,I,EAGhCE,WAAa,SAACF,GACN,EAAKf,UACL,EAAKA,QAAQkB,sBAAsBC,OAAOJ,IAC1C,EAAKN,SAAS,CACVxC,eAAgB8C,EAChB7C,YAAa6C,M,8FAxCzB,yGACUK,IAAYC,IAAZ,sBAAsCC,MAAK,SAACC,GAC9C,IAAMxD,EAAUwD,EAAStC,KAAKA,KAC9BuC,QAAQC,IAAI1D,GACZ,EAAK0C,SAAS,CAAE1C,eAJxB,2C,0EA6CA,WAAU,IAAD,OACL,EAA+C2D,KAAK5D,MAA5CC,EAAR,EAAQA,QAASS,EAAjB,EAAiBA,WAAYL,EAA7B,EAA6BA,cAC7B,OACIqD,QAAQC,IAAI1D,GAER,kBAAC,IAAD,CAAKiB,UAAU,iBACX,kBAAC,IAAD,CAAK2C,GAAG,OACR,kBAAC,IAAD,CAAKA,GAAG,MACJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAK3C,UAAU,OACX,kBAAC,IAAD,KACI,wBAAI2C,GAAG,IAAI3C,UAAU,cAArB,qBAIJ,kBAAC,IAAD,CAAKA,UAAU,QACX,kBAAC,IAAD,CACIQ,OAAQ,gBAAGC,EAAH,EAAGA,QAAH,OACJ,kBAAC,IAAD,CACIT,UAAU,+BACVY,QAAS,kBAAMH,EAAQI,KAAK,+CAFhC,wBAUhB,kBAAC,IAAD,KAC4B,OAAvB6B,KAAK5D,MAAMC,QAAmB,KAC3B,yBAAKiB,UAAU,8CACX,yBAAKA,UAAU,+DACX,yBAAKA,UAAU,QACX,kBAAC,IAAD,CAAsBA,UAAU,mBAC5B,kBAAC,IAAD,CAAgB4C,IAAI,OACfF,KAAK1B,QACA0B,KAAK5D,MAAMG,eACX,GAAKyD,KAAK5D,MAAMI,aACjBwD,KAAK5D,MAAMI,YAAc,GAAI,IAJtC,IAKM,IACDwD,KAAK5D,MAAMC,QAAQ8D,OAChBH,KAAK5D,MAAMG,eACXyD,KAAK5D,MAAMI,YACX,EACEwD,KAAK5D,MAAMG,eACbyD,KAAK5D,MAAMI,YACTwD,KAAK5D,MAAMC,QAAQ8D,OAAQ,IAZrC,MAaQH,KAAK5D,MAAMC,QAAQ8D,OACvB,kBAAC,IAAD,CAAa7C,UAAU,QAAQU,KAAM,MAEzC,kBAAC,IAAD,CAAcoC,OAAK,GACf,kBAAC,IAAD,CACIF,IAAI,MACJhC,QAAS,kBAAM,EAAKqB,WAAW,MAFnC,MAMA,kBAAC,IAAD,CACIW,IAAI,MACJhC,QAAS,kBAAM,EAAKqB,WAAW,MAFnC,MAMA,kBAAC,IAAD,CACIW,IAAI,MACJhC,QAAS,kBAAM,EAAKqB,WAAW,OAFnC,OAMA,kBAAC,IAAD,CACIW,IAAI,MACJhC,QAAS,kBAAM,EAAKqB,WAAW,OAFnC,UASZ,yBAAKjC,UAAU,iDACX,yBAAKA,UAAU,oBACX,kBAAC,IAAD,CACI+C,YAAY,YACZC,SAAU,SAACC,GAAD,OACN,EAAKnB,kBAAkBmB,EAAEC,OAAOC,QAEpCA,MAAOT,KAAK5D,MAAMqE,SAG1B,yBAAKnD,UAAU,cACX,kBAAC,IAAOoD,OAAR,CACIzC,MAAM,UACNC,QAAS,kBAAM,EAAKI,QAAQqC,oBAFhC,oBASZ,kBAAC,IAAcC,SAAf,MACK,SAACC,GAAD,OACG,kBAAC,cAAD,CACIC,YAAa,GACbC,aAAa,WACbtE,cAAeA,EACfK,WAAYA,EACZT,QAASA,EACTsC,YAAa,EAAKA,YAClBqC,iBAAkB,QAClBC,aAAa,EACbC,gBAAgB,EAChBC,YAAY,EACZ7E,mBAAoB,EAAKF,MAAME,mBAC/B8E,eAAe,SACfC,UAAuC,QAA5BR,EAAQzE,MAAMkF,wB,GA1Q/CC,IAAMC,WAwRrBrF","file":"static/js/202.f31b18e9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardBody, Input, Row, Col, Button, UncontrolledDropdown, DropdownMenu, DropdownItem, DropdownToggle, } from \"reactstrap\";\r\nimport axiosConfig from \"../../../../axiosConfig\";\r\nimport moment from \"moment\";\r\n\r\nimport { ContextLayout } from \"../../../../utility/context/Layout\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { Edit, Trash2, ChevronDown, Smartphone } from \"react-feather\";\r\nimport \"../../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport { Route } from \"react-router-dom\";\r\nimport swal from \"sweetalert\";\r\n\r\nclass SubcategoryList extends React.Component {\r\n    state = {\r\n        rowData: [],\r\n        paginationPageSize: 20,\r\n        currenPageSize: \"\",\r\n        getPageSize: \"\",\r\n        defaultColDef: {\r\n            sortable: true,\r\n            editable: true,\r\n            resizable: true,\r\n            suppressMenu: true,\r\n        },\r\n\r\n        columnDefs: [\r\n            {\r\n                headerName: \"S.No\",\r\n                valueGetter: \"node.rowIndex + 1\",\r\n                field: \"node.rowIndex + 1\",\r\n                width: 100,\r\n                filter: true,\r\n                // checkboxSelection: true,\r\n                // headerCheckboxSelectionFilteredOnly: true,\r\n                // headerCheckboxSelection: true,\r\n            },\r\n            {\r\n                headerName: \"Category Selection \",\r\n                field: \"title\",\r\n                width: 250,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"d-flex align-items-center cursor-pointer\">\r\n                            <span>{params.data.category?.title}</span>\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n            {\r\n                headerName: \"Title\",\r\n                field: \"title\",\r\n                width: 250,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"d-flex align-items-center cursor-pointer\">\r\n                            <span>{params.data.title}</span>\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n\r\n            {\r\n                headerName: \"Note\",\r\n                field: \"desc\",\r\n                width: 250,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"d-flex  align-items-center cursor-pointer\">\r\n                            <span>{params.data.desc}</span>\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n            {\r\n                headerName: \"Actions\",\r\n                field: \"sortorder\",\r\n                width: 150,\r\n                pinned: window.innerWidth > 992 ? \"right\" : false,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"actions cursor-pointer\">\r\n                            {/* <Smartphone\r\n                                className=\"mr-50\"\r\n                                size=\"25px\"\r\n                                color={params.data.status === \"Active\" ? \"green\" : \"red\"}\r\n                                onClick={() => {\r\n                                    let selectedData = this.gridApi.getSelectedRows();\r\n                                    this.runthisfunctionEdit(params.data._id, selectedData);\r\n                                }}\r\n                            /> */}\r\n\r\n                            <Route\r\n                                render={({ history }) => (\r\n                                    <Edit\r\n                                        className=\"mr-50\"\r\n                                        size=\"25px\"\r\n                                        color=\"blue\"\r\n                                        onClick={() =>\r\n                                            history.push(`/app/brahmaand/subcategory/editSubcategory/${params.data._id}`)\r\n                                        }\r\n                                    />\r\n                                )}\r\n                            />\r\n\r\n                            <Trash2\r\n                                size={20}\r\n                                color=\"red\"\r\n                                onClick={() => {\r\n                                    let selectedData = this.gridApi.getSelectedRows();\r\n                                    this.runthisfunction(params.data._id);\r\n                                    this.gridApi.updateRowData({ remove: selectedData });\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n        ],\r\n    };\r\n\r\n    async componentDidMount() {\r\n        await axiosConfig.get(`/getallSubCategory`).then((response) => {\r\n            const rowData = response.data.data;\r\n            console.log(rowData);\r\n            this.setState({ rowData });\r\n        });\r\n    }\r\n    // async runthisfunction(id) {\r\n    //     console.log(id);\r\n    //     await axiosConfig.get(`/dlt_alltrade/${id}`).then(\r\n    //         (response) => {\r\n    //             console.log(response);\r\n    //         },\r\n    //         (error) => {\r\n    //             console.log(error);\r\n    //         }\r\n    //     );\r\n    // }\r\n\r\n\r\n\r\n    onGridReady = (params) => {\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.setState({\r\n            currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n            getPageSize: this.gridApi.paginationGetPageSize(),\r\n            totalPages: this.gridApi.paginationGetTotalPages(),\r\n        });\r\n    };\r\n\r\n    updateSearchQuery = (val) => {\r\n        this.gridApi.setQuickFilter(val);\r\n    };\r\n\r\n    filterSize = (val) => {\r\n        if (this.gridApi) {\r\n            this.gridApi.paginationSetPageSize(Number(val));\r\n            this.setState({\r\n                currenPageSize: val,\r\n                getPageSize: val,\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { rowData, columnDefs, defaultColDef } = this.state;\r\n        return (\r\n            console.log(rowData),\r\n            (\r\n                <Row className=\"app-user-list\">\r\n                    <Col sm=\"12\"></Col>\r\n                    <Col sm=\"12\">\r\n                        <Card>\r\n                            <Row className=\"m-2\">\r\n                                <Col>\r\n                                    <h1 sm=\"6\" className=\"float-left\">\r\n                                        SubCategory List\r\n                                    </h1>\r\n                                </Col>\r\n                                <Col className=\"pt-4\">\r\n                                    <Route\r\n                                        render={({ history }) => (\r\n                                            <Button\r\n                                                className=\" btn btn-success float-right\"\r\n                                                onClick={() => history.push(\"/app/brahmaand/subcategory/addSubcategory\")}\r\n                                            >\r\n                                                Add SubCategory\r\n                                            </Button>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <CardBody>\r\n                                {this.state.rowData === null ? null : (\r\n                                    <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                                        <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                                            <div className=\"mb-1\">\r\n                                                <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                                                    <DropdownToggle tag=\"div\">\r\n                                                        {this.gridApi\r\n                                                            ? this.state.currenPageSize\r\n                                                            : \"\" * this.state.getPageSize -\r\n                                                            (this.state.getPageSize - 1)}{\" \"}\r\n                                                        -{\" \"}\r\n                                                        {this.state.rowData.length -\r\n                                                            this.state.currenPageSize *\r\n                                                            this.state.getPageSize >\r\n                                                            0\r\n                                                            ? this.state.currenPageSize *\r\n                                                            this.state.getPageSize\r\n                                                            : this.state.rowData.length}{\" \"}\r\n                                                        of {this.state.rowData.length}\r\n                                                        <ChevronDown className=\"ml-50\" size={15} />\r\n                                                    </DropdownToggle>\r\n                                                    <DropdownMenu right>\r\n                                                        <DropdownItem\r\n                                                            tag=\"div\"\r\n                                                            onClick={() => this.filterSize(20)}\r\n                                                        >\r\n                                                            20\r\n                                                        </DropdownItem>\r\n                                                        <DropdownItem\r\n                                                            tag=\"div\"\r\n                                                            onClick={() => this.filterSize(50)}\r\n                                                        >\r\n                                                            50\r\n                                                        </DropdownItem>\r\n                                                        <DropdownItem\r\n                                                            tag=\"div\"\r\n                                                            onClick={() => this.filterSize(100)}\r\n                                                        >\r\n                                                            100\r\n                                                        </DropdownItem>\r\n                                                        <DropdownItem\r\n                                                            tag=\"div\"\r\n                                                            onClick={() => this.filterSize(134)}\r\n                                                        >\r\n                                                            134\r\n                                                        </DropdownItem>\r\n                                                    </DropdownMenu>\r\n                                                </UncontrolledDropdown>\r\n                                            </div>\r\n                                            <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n                                                <div className=\"table-input mr-1\">\r\n                                                    <Input\r\n                                                        placeholder=\"search...\"\r\n                                                        onChange={(e) =>\r\n                                                            this.updateSearchQuery(e.target.value)\r\n                                                        }\r\n                                                        value={this.state.value}\r\n                                                    />\r\n                                                </div>\r\n                                                <div className=\"export-btn\">\r\n                                                    <Button.Ripple\r\n                                                        color=\"primary\"\r\n                                                        onClick={() => this.gridApi.exportDataAsCsv()}\r\n                                                    >\r\n                                                        Export as CSV\r\n                                                    </Button.Ripple>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <ContextLayout.Consumer>\r\n                                            {(context) => (\r\n                                                <AgGridReact\r\n                                                    gridOptions={{}}\r\n                                                    rowSelection=\"multiple\"\r\n                                                    defaultColDef={defaultColDef}\r\n                                                    columnDefs={columnDefs}\r\n                                                    rowData={rowData}\r\n                                                    onGridReady={this.onGridReady}\r\n                                                    colResizeDefault={\"shift\"}\r\n                                                    animateRows={true}\r\n                                                    floatingFilter={false}\r\n                                                    pagination={true}\r\n                                                    paginationPageSize={this.state.paginationPageSize}\r\n                                                    pivotPanelShow=\"always\"\r\n                                                    enableRtl={context.state.direction === \"rtl\"}\r\n                                                />\r\n                                            )}\r\n                                        </ContextLayout.Consumer>\r\n                                    </div>\r\n                                )}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            )\r\n        );\r\n    }\r\n}\r\nexport default SubcategoryList;\r\n"],"sourceRoot":""}