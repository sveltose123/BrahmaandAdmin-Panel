{"version":3,"sources":["views/apps/brahmaand/works/Works.js"],"names":["Works","state","rowData","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","valueGetter","field","width","filter","cellRendererFramework","params","className","ReactHtmlParser","data","desc","size","color","onClick","selectedData","gridApi","getSelectedRows","runthisfunction","_id","updateRowData","remove","onGridReady","api","gridColumnApi","columnApi","setState","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","axiosConfig","get","then","response","console","log","id","this","Fragment","sm","render","history","push","tag","length","right","placeholder","onChange","e","target","value","Ripple","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/205.7ed5e12d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n    Row, Card, CardBody, Input, Button, Col, UncontrolledDropdown, DropdownMenu, DropdownItem,\r\n    DropdownToggle,\r\n} from \"reactstrap\";\r\nimport axiosConfig from \"../../../../axiosConfig\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { ContextLayout } from \"../../../../utility/context/Layout\";\r\nimport { ChevronDown, Edit, Trash2 } from \"react-feather\";\r\nimport \"../../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\n// import Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\";\r\nimport { Route } from \"react-router-dom\";\r\nimport ReactHtmlParser from \"react-html-parser\";\r\n\r\nclass Works extends React.Component {\r\n    state = {\r\n        rowData: [],\r\n        paginationPageSize: 20,\r\n        currenPageSize: \"\",\r\n        getPageSize: \"\",\r\n        defaultColDef: {\r\n            sortable: true,\r\n            editable: true,\r\n            resizable: true,\r\n            suppressMenu: true,\r\n        },\r\n        columnDefs: [\r\n            {\r\n                headerName: \"S.No\",\r\n                valueGetter: \"node.rowIndex + 1\",\r\n                field: \"node.rowIndex + 1\",\r\n                width: 200,\r\n                filter: true,\r\n            },\r\n            {\r\n                headerName: \"Descriptions\",\r\n                field: \"desc\",\r\n                width: 600,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"d-flex align-items-center cursor-pointer\">\r\n                            <span>{ReactHtmlParser(params.data.desc)}</span>\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n            {\r\n                headerName: \"Actions\",\r\n                field: \"sortorder\",\r\n                width: 200,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"actions cursor-pointer\">\r\n                            {/* <Route\r\n                                render={({ history }) => ( */}\r\n                            {/* //         <Edit */}\r\n                            {/* //            */}\r\n                            {/* //                 history.push(`/app/brahmaand/works/editWorks/${params.data._id}`)\r\n                            //             }  className=\"mr-50\"\r\n                            //             size=\"25px\"\r\n                            //             color=\"blue\"\r\n                            //             onClick={() =>\r\n                            //         />\r\n                            //     )}\r\n                            // /> */}\r\n\r\n                            <Trash2\r\n                                className=\"mr-50\"\r\n                                size=\"25px\"\r\n                                color=\"red\"\r\n                                onClick={() => {\r\n                                    let selectedData = this.gridApi.getSelectedRows();\r\n                                    this.runthisfunction(params.data._id);\r\n                                    this.gridApi.updateRowData({ remove: selectedData });\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n        ],\r\n    };\r\n    async componentDidMount() {\r\n        await axiosConfig.get(\"/admin/get_howWorks\").then((response) => {\r\n            const rowData = response.data.data;\r\n            console.log(rowData);\r\n            this.setState({ rowData });\r\n        });\r\n    }\r\n    async runthisfunction(id) {\r\n        console.log(id);\r\n        await axiosConfig\r\n            .get(`/admin/dlt_howWorks/${id}`)\r\n            .then((response) => {\r\n                console.log(response);\r\n            });\r\n    }\r\n\r\n    onGridReady = (params) => {\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.setState({\r\n            currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n            getPageSize: this.gridApi.paginationGetPageSize(),\r\n            totalPages: this.gridApi.paginationGetTotalPages(),\r\n        });\r\n    };\r\n\r\n    updateSearchQuery = (val) => {\r\n        this.gridApi.setQuickFilter(val);\r\n    };\r\n\r\n    filterSize = (val) => {\r\n        if (this.gridApi) {\r\n            this.gridApi.paginationSetPageSize(Number(val));\r\n            this.setState({\r\n                currenPageSize: val,\r\n                getPageSize: val,\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { rowData, columnDefs, defaultColDef } = this.state;\r\n        return (\r\n            <React.Fragment>\r\n                <Card className=\"overflow-hidden agGrid-card\">\r\n                    <Row className=\"m-2\">\r\n                        <Col>\r\n                            <h1 sm=\"6\" className=\"float-left\">\r\n                                How Its Works List\r\n                            </h1>\r\n                        </Col>\r\n\r\n                        <Col>\r\n                            <Route\r\n                                render={({ history }) => (\r\n                                    <Button\r\n                                        className=\"btn btn-success float-right\"\r\n                                        onClick={() =>\r\n                                            history.push(\"/app/brahmaand/works/addWorks\")\r\n                                        }\r\n                                    >\r\n                                        Add Works\r\n                                    </Button>\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <CardBody className=\"py-0\">\r\n                        {this.state.rowData === null ? null : (\r\n                            <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                                <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                                    <div className=\"mb-1\">\r\n                                        <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                                            <DropdownToggle tag=\"div\">\r\n                                                {this.gridApi\r\n                                                    ? this.state.currenPageSize\r\n                                                    : \"\" * this.state.getPageSize -\r\n                                                    (this.state.getPageSize - 1)}{\" \"}\r\n                                                -{\" \"}\r\n                                                {this.state.rowData.length -\r\n                                                    this.state.currenPageSize * this.state.getPageSize >\r\n                                                    0\r\n                                                    ? this.state.currenPageSize * this.state.getPageSize\r\n                                                    : this.state.rowData.length}{\" \"}\r\n                                                of {this.state.rowData.length}\r\n                                                <ChevronDown className=\"ml-50\" size={15} />\r\n                                            </DropdownToggle>\r\n                                            <DropdownMenu right>\r\n                                                <DropdownItem\r\n                                                    tag=\"div\"\r\n                                                    onClick={() => this.filterSize(20)}\r\n                                                >\r\n                                                    20\r\n                                                </DropdownItem>\r\n                                                <DropdownItem\r\n                                                    tag=\"div\"\r\n                                                    onClick={() => this.filterSize(50)}\r\n                                                >\r\n                                                    50\r\n                                                </DropdownItem>\r\n                                                <DropdownItem\r\n                                                    tag=\"div\"\r\n                                                    onClick={() => this.filterSize(100)}\r\n                                                >\r\n                                                    100\r\n                                                </DropdownItem>\r\n                                                <DropdownItem\r\n                                                    tag=\"div\"\r\n                                                    onClick={() => this.filterSize(134)}\r\n                                                >\r\n                                                    134\r\n                                                </DropdownItem>\r\n                                            </DropdownMenu>\r\n                                        </UncontrolledDropdown>\r\n                                    </div>\r\n                                    <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n                                        <div className=\"table-input mr-1\">\r\n                                            <Input\r\n                                                placeholder=\"search...\"\r\n                                                onChange={(e) => this.updateSearchQuery(e.target.value)}\r\n                                                value={this.state.value}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"export-btn\">\r\n                                            <Button.Ripple\r\n                                                color=\"primary\"\r\n                                                onClick={() => this.gridApi.exportDataAsCsv()}\r\n                                            >\r\n                                                Export as CSV\r\n                                            </Button.Ripple>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <ContextLayout.Consumer>\r\n                                    {(context) => (\r\n                                        <AgGridReact\r\n                                            gridOptions={{}}\r\n                                            rowSelection=\"multiple\"\r\n                                            defaultColDef={defaultColDef}\r\n                                            columnDefs={columnDefs}\r\n                                            rowData={rowData}\r\n                                            onGridReady={this.onGridReady}\r\n                                            colResizeDefault={\"shift\"}\r\n                                            animateRows={true}\r\n                                            floatingFilter={false}\r\n                                            pagination={true}\r\n                                            paginationPageSize={this.state.paginationPageSize}\r\n                                            pivotPanelShow=\"always\"\r\n                                            enableRtl={context.state.direction === \"rtl\"}\r\n                                        />\r\n                                    )}\r\n                                </ContextLayout.Consumer>\r\n                            </div>\r\n                        )}\r\n                    </CardBody>\r\n                </Card>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default Works;\r\n"],"sourceRoot":""}