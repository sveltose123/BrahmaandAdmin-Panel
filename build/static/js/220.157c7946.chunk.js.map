{"version":3,"sources":["views/apps/brahmaand/notif/UserNotification.js"],"names":["UserNotification","state","rowData","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","valueGetter","field","width","filter","cellRendererFramework","params","className","data","userid","fullname","mobile","userimg","size","color","onClick","selectedData","gridApi","getSelectedRows","runthisfunction","_id","updateRowData","remove","onGridReady","api","gridColumnApi","columnApi","setState","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","this","sm","col-sm-6","tag","length","right","placeholder","onChange","e","target","value","Ripple","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/220.157c7946.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Row, Card, CardBody, Input, Button, Col, UncontrolledDropdown, DropdownMenu, DropdownItem, DropdownToggle, } from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport axiosConfig from \"../../../../axiosConfig\";\r\n// import { history } from \"../../../history\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { ContextLayout } from \"../../../../utility/context/Layout\";\r\nimport { ChevronDown, Trash2, Edit } from \"react-feather\";\r\nimport \"../../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\n// import Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\";\r\nimport { Route } from \"react-router-dom\";\r\nclass UserNotification extends React.Component {\r\n  state = {\r\n    rowData: [],\r\n    paginationPageSize: 20,\r\n    currenPageSize: \"\",\r\n    getPageSize: \"\",\r\n    defaultColDef: {\r\n      sortable: true,\r\n      editable: true,\r\n      resizable: true,\r\n      suppressMenu: true,\r\n    },\r\n    columnDefs: [\r\n      {\r\n        headerName: \"S.No\",\r\n        valueGetter: \"node.rowIndex + 1\",\r\n        field: \"node.rowIndex + 1\",\r\n        width: 100,\r\n        filter: true,\r\n        // checkboxSelection: true,\r\n        // headerCheckboxSelectionFilteredOnly: true,\r\n        // headerCheckboxSelection: true,\r\n      },\r\n      {\r\n        headerName: \"User Name\",\r\n        field: \"fullname\",\r\n        width: 180,\r\n        // pinned: window.innerWidth > 992 ? \"left\" : false,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data.userid.fullname}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Mobile\",\r\n        field: \"mobile\",\r\n        width: 180,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data.userid.mobile}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      // {\r\n      //   headerName: \"Date/Time\",\r\n      //   field: \"createdAt\",\r\n      //   width: 180,\r\n      //   cellRendererFramework: (params) => {\r\n      //     return (\r\n      //       <div className=\"d-flex align-items-center cursor-pointer\">\r\n      //         <span>{params.data.createdAt}</span>\r\n      //       </div>\r\n      //     );\r\n      //   },\r\n      // },\r\n      //   {\r\n      //     headerName: \"Email\",\r\n      //     field: \"email\",\r\n      //     width: 180,\r\n      //     cellRendererFramework: (params) => {\r\n      //       return (\r\n      //         <div className=\"d-flex align-items-center cursor-pointer\">\r\n      //           <span>{params.data.email}</span>\r\n      //         </div>\r\n      //       );\r\n      //     },\r\n      //   },\r\n\r\n      {\r\n        headerName: \"Image\",\r\n        field: \"userimg\",\r\n        width: 180,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data.userid.userimg}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      //   {\r\n      //     headerName: \"City\",\r\n      //     field: \"district\",\r\n      //     width: 180,\r\n      //     cellRendererFramework: (params) => {\r\n      //       return (\r\n      //         <div className=\"d-flex align-items-center cursor-pointer\">\r\n      //           <span>{params.data.district}</span>\r\n      //         </div>\r\n      //       );\r\n      //     },\r\n      //   },\r\n      //   {\r\n      //     headerName: \"Start Date\",\r\n      //     field: \"district\",\r\n      //     width: 180,\r\n      //     cellRendererFramework: (params) => {\r\n      //       return (\r\n      //         <div className=\"d-flex align-items-center cursor-pointer\">\r\n      //           <span>{params.data.district}</span>\r\n      //         </div>\r\n      //       );\r\n      //     },\r\n      //   },\r\n      //   {\r\n      //     headerName: \"Expiry Date\",\r\n      //     field: \"district\",\r\n      //     width: 180,\r\n      //     cellRendererFramework: (params) => {\r\n      //       return (\r\n      //         <div className=\"d-flex align-items-center cursor-pointer\">\r\n      //           <span>{params.data.district}</span>\r\n      //         </div>\r\n      //       );\r\n      //     },\r\n      //   },\r\n      //   // {\r\n      //   //   headerName: \"Status\",\r\n      //   //   field: \"userverified\",\r\n      //   //   // filter: true,\r\n      //   //   width: 150,\r\n      //   //   cellRendererFramework: (params) => {\r\n      //   //     return params.value === \"Active\" ? (\r\n      //   //       <div className=\"badge badge-pill badge-success\">\r\n      //   //         {params.data.userverified}\r\n      //   //       </div>\r\n      //   //     ) : params.value === \"Inactive\" ? (\r\n      //   //       <div className=\"badge badge-pill badge-warning\">\r\n      //   //         {params.data.userverified}\r\n      //   //       </div>\r\n      //   //     ) : null;\r\n      //   //   },\r\n      //   // },\r\n      {\r\n        headerName: \"Actions\",\r\n        field: \"sortorder\",\r\n        width: 180,\r\n        // pinned: window.innerWidth > 992 ? \"right\" : false,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"actions cursor-pointer\">\r\n              {/* <Route\r\n                render={({ history }) => (\r\n                  <Edit\r\n                    className=\"mr-50\"\r\n                    size=\"25px\"\r\n                    color=\"blue\"\r\n                    onClick={() => history.push(`/app/users/editUsers`)}\r\n                  />\r\n                )}\r\n              /> */}\r\n\r\n              <Trash2\r\n                className=\"mr-50\"\r\n                size=\"25px\"\r\n                color=\"red\"\r\n                onClick={() => {\r\n                  let selectedData = this.gridApi.getSelectedRows();\r\n                  this.runthisfunction(params.data._id);\r\n                  this.gridApi.updateRowData({ remove: selectedData });\r\n                }}\r\n              />\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ],\r\n  };\r\n  // async componentDidMount() {\r\n  //   axiosConfig\r\n  //     .get(`/`)\r\n  //     .then((response) => {\r\n  //       let rowData = response.data.data;\r\n  //       JSON.stringify(rowData);\r\n  //       this.setState({ rowData });\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       console.log(error.response);\r\n  //     });\r\n  // }\r\n  // async runthisfunction(id) {\r\n  //   console.log(id);\r\n  //   await axiosConfig\r\n  //     .get(`/dealer/deletedealershipform/${id}`)\r\n  //     .then((response) => {\r\n  //       console.log(response);\r\n  //     });\r\n  // }\r\n\r\n  onGridReady = (params) => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.setState({\r\n      currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n      getPageSize: this.gridApi.paginationGetPageSize(),\r\n      totalPages: this.gridApi.paginationGetTotalPages(),\r\n    });\r\n  };\r\n\r\n  updateSearchQuery = (val) => {\r\n    this.gridApi.setQuickFilter(val);\r\n  };\r\n\r\n  filterSize = (val) => {\r\n    if (this.gridApi) {\r\n      this.gridApi.paginationSetPageSize(Number(val));\r\n      this.setState({\r\n        currenPageSize: val,\r\n        getPageSize: val,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { rowData, columnDefs, defaultColDef } = this.state;\r\n    return (\r\n      <Row className=\"app-user-list\">\r\n        <Col sm=\"12\"></Col>\r\n        <Col sm=\"12\">\r\n          <Card>\r\n            <Row className=\"m-2\">\r\n              <Col>\r\n                <h1 col-sm-6 className=\"float-left\">\r\n                  User Notification List\r\n                </h1>\r\n              </Col>\r\n            </Row>\r\n            {/* <Col className=\"pt-4\">\r\n              <Route\r\n                render={({ history }) => (\r\n                  <Button\r\n                    className=\" btn btn-success float-right\"\r\n                    onClick={() => history.push(\"/app/users/addUsers\")}\r\n                  >\r\n                    Edit UserNotification\r\n                  </Button>\r\n                )}\r\n              />\r\n            </Col> */}\r\n\r\n            <CardBody className=\"py-0\">\r\n              {this.state.rowData === null ? null : (\r\n                <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                  <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                    <div className=\"mb-1\">\r\n                      <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                        <DropdownToggle tag=\"div\">\r\n                          {this.gridApi\r\n                            ? this.state.currenPageSize\r\n                            : \"\" * this.state.getPageSize -\r\n                            (this.state.getPageSize - 1)}{\" \"}\r\n                          -{\" \"}\r\n                          {this.state.rowData.length -\r\n                            this.state.currenPageSize * this.state.getPageSize >\r\n                            0\r\n                            ? this.state.currenPageSize * this.state.getPageSize\r\n                            : this.state.rowData.length}{\" \"}\r\n                          of {this.state.rowData.length}\r\n                          <ChevronDown className=\"ml-50\" size={15} />\r\n                        </DropdownToggle>\r\n                        <DropdownMenu right>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(20)}\r\n                          >\r\n                            20\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(50)}\r\n                          >\r\n                            50\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(100)}\r\n                          >\r\n                            100\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(134)}\r\n                          >\r\n                            134\r\n                          </DropdownItem>\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    </div>\r\n                    <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n                      <div className=\"table-input mr-1\">\r\n                        <Input\r\n                          placeholder=\"search...\"\r\n                          onChange={(e) =>\r\n                            this.updateSearchQuery(e.target.value)\r\n                          }\r\n                          value={this.state.value}\r\n                        />\r\n                      </div>\r\n                      <div className=\"export-btn\">\r\n                        <Button.Ripple\r\n                          color=\"primary\"\r\n                          onClick={() => this.gridApi.exportDataAsCsv()}\r\n                        >\r\n                          Export as CSV\r\n                        </Button.Ripple>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <ContextLayout.Consumer>\r\n                    {(context) => (\r\n                      <AgGridReact\r\n                        gridOptions={{}}\r\n                        rowSelection=\"multiple\"\r\n                        defaultColDef={defaultColDef}\r\n                        columnDefs={columnDefs}\r\n                        rowData={rowData}\r\n                        onGridReady={this.onGridReady}\r\n                        colResizeDefault={\"shift\"}\r\n                        animateRows={true}\r\n                        floatingFilter={false}\r\n                        pagination={true}\r\n                        paginationPageSize={this.state.paginationPageSize}\r\n                        pivotPanelShow=\"always\"\r\n                        enableRtl={context.state.direction === \"rtl\"}\r\n                      />\r\n                    )}\r\n                  </ContextLayout.Consumer>\r\n                </div>\r\n              )}\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\nexport default UserNotification;\r\n"],"sourceRoot":""}